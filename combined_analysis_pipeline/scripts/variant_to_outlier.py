#!/usr/bin/env python

"""
This script takes in a .csv with variants from DNA samples
and attempts to find if the genes in which the variants are present are
also present in the outlier splicing or expression files.

The outlier expression files are generated by: 
    T. Niemeyer's RNA outlier detection pipeline which can be found here:
            https://github.com/Timniem/rna_outlier_pipeline
The variants have been generated by: 
    Variant Interpretation Pipeline (VIP), version 7.9.1

This script uses several arguments for a thorough description, please use the help.
For a summary:
-i = the path to the csv file that will be analysed
-l = the path to the comma-seperated linking table. The first row is the DNA ID's and the second
    row is the RNA ID's
-s = DNA sample ID from the .csv input file
-r = path to the directory with RNA data. Make sure there are seperate sub-directories for
     outrider_expression_outliers and fraser_splicing_outliers.

To get a description of the arguments this script uses, please
inform the help. That's done typing the following into the terminal:
DNA_RNA_nextflow.py --help
"""

import argparse


def parse_variant_csv(file, found_genes) -> None:
    """
    Function that parses an .csv file. The function assumes the sample ID is found at
    index 7, and the gene symbol is found at index 4. It looks for genes found in the RNA
    expression and splicing outlier files and writes the genes that were found to an output.

    arguments:
    file = the .csv file that needs to be parsed where the sample ID is found in the eight column
            and the gene symbol is found in the fifth column.
    sample_ID = DNA sample ID
    linking_table = the path to the linking table file
    rna_dir = the path to the rna_directory
    """
    try:
        with open(file, 'r', encoding="utf8") as csv_file:
            for line in csv_file:
                csv_list = line.split(",")
                gene = csv_list[6]
                outrider, fraser = found_genes
                if gene in fraser and outrider:
                    output_line = f'{line.strip()},{"found in splicing and expression outliers"}'
                    print(output_line)
                elif gene in fraser:
                    output_line = f'{line.strip()},{"found in splicing outliers"}'
                    print(output_line)
                elif gene in outrider:
                    output_line = f'{line.strip()},{"found expression outliers"}'
                    print(output_line)
    except IOError as e:
        print("The file could not be opened. The following error occured:", e)


def parse_outlier_result(sample_to_find, result_summary, gene_symbol_index, p_adjust_index) -> list:
    """
    Looks for the RNA sample ID in the given outlier file and returns a list of
    the genes found in the file.

    arguments:
    sample_to_find = the RNA sample ID to look for
    result_summary = the outlier expression file
    gene_symbol_index = the column number in which the gene symbol is found

    return:
    a list with found genes for the given sample ID
    """
    try:
        with open(result_summary, 'r', encoding="utf8") as results:
            result_list = []
            next(results, None)
            for line in results:
                # Get the adjusted p_value from file and remove quotation marks
                p_adjust = line.split("\t")[p_adjust_index].replace('"', '')
                if sample_to_find in line and float(p_adjust) <= 0.05:
                    result_list.append(line.split("\t")[gene_symbol_index].strip('\"') )
        return result_list
    except IOError as e:
        print("The file could not be opened. The following error occured:", e)


def parse_linking_table(file, dna_sample_id, rna_dir) -> list:
    """
    Function that finds corresponding RNA sample ID to the given DNA sample ID 
    in the linking table. It will use this RNA sample ID to look in the outlier expression
    and splicing files. It will return a list in accordance to the following template:
    [[OUTRIDER], [FRASER]]

    arguments:
    file = the linking table file
    dna_sample_id = sample ID from the DNA data
    rna_dir = the path to the rna directory

    return:
    a list of lists containing outrider and fraser results
    """
    try:
        with open(file, 'r', encoding="utf8") as table:
            # Skip header
            next(table, None)
            for line in table:
                if dna_sample_id in line:
                    line = line.split(",")
                    rna_id = line[1].strip()
                    fraser_results = f'{rna_dir}/fraser/{rna_id}_result_table_fraser.tsv'
                    outrider_results = f'{rna_dir}/outrider/{rna_id}_result_table_outrider.tsv'
                    found_genes = [parse_outlier_result(rna_id, outrider_results, 15, 3),
                                        parse_outlier_result(rna_id, fraser_results, 6, 9)]
                    return found_genes
    except OSError as e:
        raise OSError(f"\n Can't find the results matching with DNA ID:{dna_sample_id}.\
                      Please make sure the correct files are available.") from e


def argument_parser():
    """
    Argument parser to parse command line arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input",
                        help="The path to the file that will be checked.")
    parser.add_argument("-s", "--sample_id",
                        help="The sample ID for the output")
    parser.add_argument("-l", "--linking_table",
                        help="The file that contains the linking table to be used")
    parser.add_argument("-r", "--rna_directory",
                        help="The path to the directory that contains \
                            either blood or fibroblast data. This directory must \
                            contain a sub-directory for OUTRIDER and FRASER data.")
    arguments = parser.parse_args()
    return arguments


def main(args) -> None:
    """
    The main function controls the flow of the script
    """
    found_genes = parse_linking_table(args.linking_table,
                                        args.sample_id, args.rna_directory)
    if found_genes:
        parse_variant_csv(args.input, found_genes)


if __name__ == "__main__":
    args_parsed = argument_parser()
    main(args_parsed)
